{"ast":null,"code":"import _regeneratorRuntime from \"/home/sin/Udemy/blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sin/Udemy/blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport jsonPlaceholder from '../apis/jsonPlaceholder'; // Without Redux-Thunk  \n// export const fetchPosts = () => {\n//     // logic below is breaking a rule of redux : Actions must be plain objects\n//     //1. Action creators must return plain JS objects with a type property - we are not!\n//     //2. By the time our action gets to a reducer, we won't have fetched our data!  \n//     // async, await is the reason\n//     // Listen to lesson 160, 161 agian\n//     const promise = jsonPlaceholder.get('./posts');\n//       return {\n//           type: 'FETCH_POSTS',\n//           payload: promise\n//       };\n// };\n// With Redux-Thunk \n// export const fetchPosts = () => {\n//   return async dispatch => {\n//     const response = await jsonPlaceholder.get('./posts');\n//     dispatch({ \n//         type: 'FETCH_POST', \n//         payload: response,\n//     })\n//   }\n// };\n// With Redux-Thunk + ES2015 \n\nexport var fetchPosts = function fetchPosts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return jsonPlaceholder.get('./posts');\n\n              case 2:\n                response = _context.sent;\n                console.log('response', response);\n                dispatch({\n                  type: 'FETCH_POST',\n                  payload: response\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //TOTALLY FINE!\n\nexport var selectPost = function selectPost() {\n  return {\n    type: 'SELECT_POST'\n  };\n};","map":{"version":3,"sources":["/home/sin/Udemy/blog/src/actions/index.js"],"names":["jsonPlaceholder","fetchPosts","dispatch","get","response","console","log","type","payload","selectPost"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,yBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACPF,eAAe,CAACG,GAAhB,CAAoB,SAApB,CADO;;AAAA;AACxBC,gBAAAA,QADwB;AAE9BC,gBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,QAAxB;AACAF,gBAAAA,QAAQ,CAAC;AACLK,kBAAAA,IAAI,EAAE,YADD;AAELC,kBAAAA,OAAO,EAAEJ;AAFJ,iBAAD,CAAR;;AAH8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,C,CAUP;;AACA,OAAO,IAAMK,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B,SAAO;AACHF,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM","sourcesContent":["import jsonPlaceholder from '../apis/jsonPlaceholder';\n\n// Without Redux-Thunk  \n// export const fetchPosts = () => {\n//     // logic below is breaking a rule of redux : Actions must be plain objects\n//     //1. Action creators must return plain JS objects with a type property - we are not!\n//     //2. By the time our action gets to a reducer, we won't have fetched our data!  \n//     // async, await is the reason\n//     // Listen to lesson 160, 161 agian\n//     const promise = jsonPlaceholder.get('./posts');\n//       return {\n//           type: 'FETCH_POSTS',\n//           payload: promise\n//       };\n// };\n\n// With Redux-Thunk \n// export const fetchPosts = () => {\n  \n//   return async dispatch => {\n//     const response = await jsonPlaceholder.get('./posts');\n\n//     dispatch({ \n//         type: 'FETCH_POST', \n//         payload: response,\n//     })\n//   }\n// };\n\n// With Redux-Thunk + ES2015 \nexport const fetchPosts = () => async dispatch => {\n  const response = await jsonPlaceholder.get('./posts');\n  console.log('response', response)\n  dispatch({ \n      type: 'FETCH_POST', \n      payload: response,\n  });\n};\n\n\n//TOTALLY FINE!\nexport const selectPost = () => {\n    return {\n        type: 'SELECT_POST'\n    }\n};"]},"metadata":{},"sourceType":"module"}